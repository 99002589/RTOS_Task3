
002task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005360  08005360  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005368  08005368  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045e4  20000014  08005384  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045f8  08005384  000245f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a1b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d87  00000000  00000000  00034a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  000377e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001000  00000000  00000000  00038940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000225a0  00000000  00000000  00039940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8fe  00000000  00000000  0005bee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d43ca  00000000  00000000  0006a7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a8  00000000  00000000  0013ec24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052ec 	.word	0x080052ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080052ec 	.word	0x080052ec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000030 	.word	0x20000030
 8000500:	20000084 	.word	0x20000084

08000504 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetTimerTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetTimerTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000284 	.word	0x20000284
 8000534:	200002d8 	.word	0x200002d8

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fafd 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f82f 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f8e9 	bl	800071c <MX_GPIO_Init>
  MX_ADC1_Init();
 800054a:	f000 f895 	bl	8000678 <MX_ADC1_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <main+0x5c>)
 8000550:	623b      	str	r3, [r7, #32]
 8000552:	2300      	movs	r3, #0
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2200      	movs	r2, #0
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f002 f9b2 	bl	80028c8 <osTimerCreate>
 8000564:	4602      	mov	r2, r0
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0x60>)
 8000568:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <main+0x64>)
 800056c:	1d3c      	adds	r4, r7, #4
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f002 f940 	bl	8002806 <osThreadCreate>
 8000586:	4602      	mov	r2, r0
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <main+0x68>)
 800058a:	601a      	str	r2, [r3, #0]
  //osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
  //defaultTaskHandle2 = osThreadCreate(osThread(defaultTask2), NULL);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f002 f934 	bl	80027f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x58>
 8000592:	bf00      	nop
 8000594:	0800080d 	.word	0x0800080d
 8000598:	20004570 	.word	0x20004570
 800059c:	08005310 	.word	0x08005310
 80005a0:	20004520 	.word	0x20004520

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fe91 	bl	80052da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000618:	2332      	movs	r3, #50	; 0x32
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061c:	2304      	movs	r3, #4
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000620:	2307      	movs	r3, #7
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f9fd 	bl	8001a28 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f93e 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fc56 	bl	8001f08 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f927 	bl	80008b4 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_ADC1_Init+0x98>)
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <MX_ADC1_Init+0x9c>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_ADC1_Init+0x98>)
 8000698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800069c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_ADC1_Init+0x98>)
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_ADC1_Init+0xa0>)
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_ADC1_Init+0x98>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_ADC1_Init+0x98>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_ADC1_Init+0x98>)
 80006da:	f000 fa71 	bl	8000bc0 <HAL_ADC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 f8e6 	bl	80008b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_ADC1_Init+0x98>)
 80006fa:	f000 fcd7 	bl	80010ac <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000704:	f000 f8d6 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20004528 	.word	0x20004528
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0x80>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_GPIO_Init+0x80>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0x80>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_GPIO_Init+0x80>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a11      	ldr	r2, [pc, #68]	; (800079c <MX_GPIO_Init+0x80>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0x80>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, temp_Pin|led_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0x84>)
 8000772:	f001 f93f 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : temp_Pin led_Pin */
  GPIO_InitStruct.Pin = temp_Pin|led_Pin;
 8000776:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0x84>)
 8000790:	f000 ff96 	bl	80016c0 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020c00 	.word	0x40020c00

080007a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(myTimer01Handle, 250);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <StartDefaultTask+0x20>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	21fa      	movs	r1, #250	; 0xfa
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 f8bc 	bl	8002930 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(temp_GPIO_Port, temp_Pin);
	  osDelay(500);
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f002 f86f 	bl	800289e <osDelay>
 80007c0:	e7fa      	b.n	80007b8 <StartDefaultTask+0x14>
 80007c2:	bf00      	nop
 80007c4:	20004570 	.word	0x20004570

080007c8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint32_t val=HAL_ADC_GetValue(&hadc1);
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <HAL_ADC_ConvCpltCallback+0x3c>)
 80007d2:	f000 fc4a 	bl	800106a <HAL_ADC_GetValue>
 80007d6:	60f8      	str	r0, [r7, #12]
	if( val>=512)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007de:	d306      	bcc.n	80007ee <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <HAL_ADC_ConvCpltCallback+0x40>)
 80007e8:	f001 f904 	bl	80019f4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);
	}
}
 80007ec:	e005      	b.n	80007fa <HAL_ADC_ConvCpltCallback+0x32>
		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <HAL_ADC_ConvCpltCallback+0x40>)
 80007f6:	f001 f8fd 	bl	80019f4 <HAL_GPIO_WritePin>
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20004528 	.word	0x20004528
 8000808:	40020c00 	.word	0x40020c00

0800080c <Callback01>:

void Callback01(void const * argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	++flag;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <Callback01+0x74>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <Callback01+0x74>)
 800081e:	701a      	strb	r2, [r3, #0]
	if(flag%3==0)
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <Callback01+0x74>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <Callback01+0x78>)
 8000826:	fba3 1302 	umull	r1, r3, r3, r2
 800082a:	0859      	lsrs	r1, r3, #1
 800082c:	460b      	mov	r3, r1
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	440b      	add	r3, r1
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d106      	bne.n	8000848 <Callback01+0x3c>
	{
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <Callback01+0x7c>)
 8000842:	f001 f8d7 	bl	80019f4 <HAL_GPIO_WritePin>
 8000846:	e005      	b.n	8000854 <Callback01+0x48>
	}
	else
	{
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <Callback01+0x7c>)
 8000850:	f001 f8d0 	bl	80019f4 <HAL_GPIO_WritePin>
	}
	if(flag%2==0)
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <Callback01+0x74>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d103      	bne.n	800086a <Callback01+0x5e>
	{
		HAL_ADC_Start_IT(&hadc1);
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <Callback01+0x80>)
 8000864:	f000 f9f0 	bl	8000c48 <HAL_ADC_Start_IT>
	else
	{
		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);
	}
  /* USER CODE END Callback01 */
}
 8000868:	e005      	b.n	8000876 <Callback01+0x6a>
		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <Callback01+0x7c>)
 8000872:	f001 f8bf 	bl	80019f4 <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000
 8000884:	aaaaaaab 	.word	0xaaaaaaab
 8000888:	40020c00 	.word	0x40020c00
 800088c:	20004528 	.word	0x20004528

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 f96d 	bl	8000b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40001400 	.word	0x40001400

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <HAL_ADC_MspInit+0x8c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12f      	bne.n	8000996 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_ADC_MspInit+0x90>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_ADC_MspInit+0x90>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_ADC_MspInit+0x90>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_ADC_MspInit+0x90>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <HAL_ADC_MspInit+0x90>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_ADC_MspInit+0x90>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pot_Pin;
 800096e:	2302      	movs	r3, #2
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	2303      	movs	r3, #3
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_ADC_MspInit+0x94>)
 8000982:	f000 fe9d 	bl	80016c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	2012      	movs	r0, #18
 800098c:	f000 fe6e 	bl	800166c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000990:	2012      	movs	r0, #18
 8000992:	f000 fe87 	bl	80016a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40012000 	.word	0x40012000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	2037      	movs	r0, #55	; 0x37
 80009c2:	f000 fe53 	bl	800166c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80009c6:	2037      	movs	r0, #55	; 0x37
 80009c8:	f000 fe6c 	bl	80016a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_InitTick+0xa4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_InitTick+0xa4>)
 80009d6:	f043 0320 	orr.w	r3, r3, #32
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_InitTick+0xa4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fc66 	bl	80022c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009f8:	f001 fc50 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 80009fc:	4603      	mov	r3, r0
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_InitTick+0xa8>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_InitTick+0xac>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_InitTick+0xac>)
 8000a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_InitTick+0xac>)
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_InitTick+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_InitTick+0xac>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <HAL_InitTick+0xac>)
 8000a32:	f001 fc79 	bl	8002328 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <HAL_InitTick+0xac>)
 8000a3e:	f001 fca8 	bl	8002392 <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	20004574 	.word	0x20004574
 8000a5c:	40001400 	.word	0x40001400

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <ADC_IRQHandler+0x10>)
 8000a9a:	f000 f9a5 	bl	8000de8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20004528 	.word	0x20004528

08000aa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM7_IRQHandler+0x10>)
 8000aae:	f001 fc94 	bl	80023da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20004574 	.word	0x20004574

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SystemInit+0x28>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <SystemInit+0x28>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SystemInit+0x28>)
 8000ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aee:	e003      	b.n	8000af8 <LoopCopyDataInit>

08000af0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000af2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000af4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000af6:	3104      	adds	r1, #4

08000af8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000afc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000afe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b00:	d3f6      	bcc.n	8000af0 <CopyDataInit>
  ldr  r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b04:	e002      	b.n	8000b0c <LoopFillZerobss>

08000b06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b08:	f842 3b04 	str.w	r3, [r2], #4

08000b0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b10:	d3f9      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b12:	f7ff ffd3 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f004 fbb1 	bl	800527c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fd0d 	bl	8000538 <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b24:	08005370 	.word	0x08005370
  ldr  r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b2c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000b30:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000b34:	200045f8 	.word	0x200045f8

08000b38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <CAN1_RX0_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 fd76 	bl	8001656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff1e 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fea8 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	200045b4 	.word	0x200045b4

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200045b4 	.word	0x200045b4

08000bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e033      	b.n	8000c3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d109      	bne.n	8000bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fe98 	bl	8000914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d118      	bne.n	8000c30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c06:	f023 0302 	bic.w	r3, r3, #2
 8000c0a:	f043 0202 	orr.w	r2, r3, #2
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 fb6c 	bl	80012f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f023 0303 	bic.w	r3, r3, #3
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c2e:	e001      	b.n	8000c34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Start_IT+0x1a>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e0b0      	b.n	8000dc4 <HAL_ADC_Start_IT+0x17c>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d018      	beq.n	8000caa <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c88:	4b51      	ldr	r3, [pc, #324]	; (8000dd0 <HAL_ADC_Start_IT+0x188>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a51      	ldr	r2, [pc, #324]	; (8000dd4 <HAL_ADC_Start_IT+0x18c>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9a      	lsrs	r2, r3, #18
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c9c:	e002      	b.n	8000ca4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f9      	bne.n	8000c9e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	f040 8084 	bne.w	8000dc2 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d007      	beq.n	8000cec <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ce4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cf8:	d106      	bne.n	8000d08 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f023 0206 	bic.w	r2, r3, #6
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	645a      	str	r2, [r3, #68]	; 0x44
 8000d06:	e002      	b.n	8000d0e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_ADC_Start_IT+0x190>)
 8000d18:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d22:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d12a      	bne.n	8000d9a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <HAL_ADC_Start_IT+0x194>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d015      	beq.n	8000d7a <HAL_ADC_Start_IT+0x132>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <HAL_ADC_Start_IT+0x198>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d105      	bne.n	8000d64 <HAL_ADC_Start_IT+0x11c>
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_ADC_Start_IT+0x190>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00a      	beq.n	8000d7a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <HAL_ADC_Start_IT+0x19c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d129      	bne.n	8000dc2 <HAL_ADC_Start_IT+0x17a>
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_ADC_Start_IT+0x190>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 031f 	and.w	r3, r3, #31
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d823      	bhi.n	8000dc2 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d11c      	bne.n	8000dc2 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	e013      	b.n	8000dc2 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_ADC_Start_IT+0x194>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d10e      	bne.n	8000dc2 <HAL_ADC_Start_IT+0x17a>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d107      	bne.n	8000dc2 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dc0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	40012300 	.word	0x40012300
 8000ddc:	40012000 	.word	0x40012000
 8000de0:	40012100 	.word	0x40012100
 8000de4:	40012200 	.word	0x40012200

08000de8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	bf0c      	ite	eq
 8000e06:	2301      	moveq	r3, #1
 8000e08:	2300      	movne	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	2b20      	cmp	r3, #32
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d049      	beq.n	8000ebe <HAL_ADC_IRQHandler+0xd6>
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d046      	beq.n	8000ebe <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d105      	bne.n	8000e48 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d12b      	bne.n	8000eae <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d127      	bne.n	8000eae <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d119      	bne.n	8000eae <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0220 	bic.w	r2, r2, #32
 8000e88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fc8a 	bl	80007c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f06f 0212 	mvn.w	r2, #18
 8000ebc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	2b80      	cmp	r3, #128	; 0x80
 8000ee0:	bf0c      	ite	eq
 8000ee2:	2301      	moveq	r3, #1
 8000ee4:	2300      	movne	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d057      	beq.n	8000fa0 <HAL_ADC_IRQHandler+0x1b8>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d054      	beq.n	8000fa0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d105      	bne.n	8000f0e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d139      	bne.n	8000f90 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d12b      	bne.n	8000f90 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d124      	bne.n	8000f90 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d11d      	bne.n	8000f90 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d119      	bne.n	8000f90 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d105      	bne.n	8000f90 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 faa9 	bl	80014e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f06f 020c 	mvn.w	r2, #12
 8000f9e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	bf0c      	ite	eq
 8000fae:	2301      	moveq	r3, #1
 8000fb0:	2300      	movne	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc0:	2b40      	cmp	r3, #64	; 0x40
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d017      	beq.n	8001002 <HAL_ADC_IRQHandler+0x21a>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d014      	beq.n	8001002 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10d      	bne.n	8001002 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f846 	bl	8001084 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f06f 0201 	mvn.w	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	2b20      	cmp	r3, #32
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <HAL_ADC_IRQHandler+0x27a>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d012      	beq.n	8001062 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f043 0202 	orr.w	r2, r3, #2
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f06f 0220 	mvn.w	r2, #32
 8001050:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f820 	bl	8001098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f06f 0220 	mvn.w	r2, #32
 8001060:	601a      	str	r2, [r3, #0]
  }
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1c>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e105      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x228>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b09      	cmp	r3, #9
 80010d6:	d925      	bls.n	8001124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68d9      	ldr	r1, [r3, #12]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	3b1e      	subs	r3, #30
 80010ee:	2207      	movs	r2, #7
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43da      	mvns	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	400a      	ands	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68d9      	ldr	r1, [r3, #12]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	4603      	mov	r3, r0
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4403      	add	r3, r0
 8001116:	3b1e      	subs	r3, #30
 8001118:	409a      	lsls	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	e022      	b.n	800116a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6919      	ldr	r1, [r3, #16]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	2207      	movs	r2, #7
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6919      	ldr	r1, [r3, #16]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	409a      	lsls	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b06      	cmp	r3, #6
 8001170:	d824      	bhi.n	80011bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b05      	subs	r3, #5
 8001184:	221f      	movs	r2, #31
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	400a      	ands	r2, r1
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3b05      	subs	r3, #5
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ba:	e04c      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b0c      	cmp	r3, #12
 80011c2:	d824      	bhi.n	800120e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b23      	subs	r3, #35	; 0x23
 80011d6:	221f      	movs	r2, #31
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43da      	mvns	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	400a      	ands	r2, r1
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b23      	subs	r3, #35	; 0x23
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
 800120c:	e023      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	3b41      	subs	r3, #65	; 0x41
 8001220:	221f      	movs	r2, #31
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	400a      	ands	r2, r1
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3b41      	subs	r3, #65	; 0x41
 800124a:	fa00 f203 	lsl.w	r2, r0, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_ADC_ConfigChannel+0x234>)
 8001258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_ADC_ConfigChannel+0x238>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d109      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b12      	cmp	r3, #18
 800126a:	d105      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_ADC_ConfigChannel+0x238>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d123      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d003      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x1e6>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b11      	cmp	r3, #17
 8001290:	d11b      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d111      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_ADC_ConfigChannel+0x23c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_ADC_ConfigChannel+0x240>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0c9a      	lsrs	r2, r3, #18
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012300 	.word	0x40012300
 80012e4:	40012000 	.word	0x40012000
 80012e8:	20000004 	.word	0x20000004
 80012ec:	431bde83 	.word	0x431bde83

080012f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f8:	4b79      	ldr	r3, [pc, #484]	; (80014e0 <ADC_Init+0x1f0>)
 80012fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	431a      	orrs	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	021a      	lsls	r2, r3, #8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6899      	ldr	r1, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <ADC_Init+0x1f4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d022      	beq.n	80013ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6899      	ldr	r1, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6899      	ldr	r1, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	e00f      	b.n	80013ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0202 	bic.w	r2, r2, #2
 80013fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6899      	ldr	r1, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
 8001408:	005a      	lsls	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01b      	beq.n	8001454 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800142a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800143a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6859      	ldr	r1, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	3b01      	subs	r3, #1
 8001448:	035a      	lsls	r2, r3, #13
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	e007      	b.n	8001464 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	3b01      	subs	r3, #1
 8001480:	051a      	lsls	r2, r3, #20
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6899      	ldr	r1, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014a6:	025a      	lsls	r2, r3, #9
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	029a      	lsls	r2, r3, #10
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40012300 	.word	0x40012300
 80014e4:	0f000001 	.word	0x0f000001

080014e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff4c 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167e:	f7ff ff61 	bl	8001544 <__NVIC_GetPriorityGrouping>
 8001682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f7ff ffb1 	bl	80015f0 <NVIC_EncodePriority>
 800168e:	4602      	mov	r2, r0
 8001690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff80 	bl	800159c <__NVIC_SetPriority>
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff54 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e16b      	b.n	80019b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 815a 	bne.w	80019ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d00b      	beq.n	800171a <HAL_GPIO_Init+0x5a>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170e:	2b11      	cmp	r3, #17
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d130      	bne.n	800177c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0xfc>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80b4 	beq.w	80019ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_GPIO_Init+0x308>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_GPIO_Init+0x308>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_GPIO_Init+0x308>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_GPIO_Init+0x30c>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <HAL_GPIO_Init+0x310>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x226>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_GPIO_Init+0x314>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <HAL_GPIO_Init+0x222>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_GPIO_Init+0x318>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01f      	beq.n	80018de <HAL_GPIO_Init+0x21e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <HAL_GPIO_Init+0x31c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x21a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_GPIO_Init+0x320>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x216>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x324>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x212>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4b      	ldr	r2, [pc, #300]	; (80019e8 <HAL_GPIO_Init+0x328>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x20e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_GPIO_Init+0x32c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x20a>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00e      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018ca:	2308      	movs	r3, #8
 80018cc:	e00c      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018ce:	2306      	movs	r3, #6
 80018d0:	e00a      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018e6:	2300      	movs	r3, #0
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f002 0203 	and.w	r2, r2, #3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4934      	ldr	r1, [pc, #208]	; (80019cc <HAL_GPIO_Init+0x30c>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_GPIO_Init+0x330>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_GPIO_Init+0x330>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_GPIO_Init+0x330>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	f67f ae90 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019bc:	bf00      	nop
 80019be:	3724      	adds	r7, #36	; 0x24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40021400 	.word	0x40021400
 80019e8:	40021800 	.word	0x40021800
 80019ec:	40021c00 	.word	0x40021c00
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e25b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d075      	beq.n	8001b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a46:	4ba3      	ldr	r3, [pc, #652]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d00c      	beq.n	8001a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a52:	4ba0      	ldr	r3, [pc, #640]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d112      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5e:	4b9d      	ldr	r3, [pc, #628]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6a:	d10b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	4b99      	ldr	r3, [pc, #612]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d05b      	beq.n	8001b30 <HAL_RCC_OscConfig+0x108>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d157      	bne.n	8001b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e236      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x74>
 8001a8e:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a90      	ldr	r2, [pc, #576]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x98>
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a87      	ldr	r2, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a83      	ldr	r2, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a80      	ldr	r2, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f862 	bl	8000ba8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f85e 	bl	8000ba8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1fb      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xc0>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f84e 	bl	8000ba8 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f84a 	bl	8000ba8 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1e7      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0xe8>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4a:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b56:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x152>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1bb      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b56      	ldr	r3, [pc, #344]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4952      	ldr	r1, [pc, #328]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_RCC_OscConfig+0x2b0>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f803 	bl	8000ba8 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7fe ffff 	bl	8000ba8 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e19c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4940      	ldr	r1, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0x2b0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7fe ffe2 	bl	8000ba8 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be8:	f7fe ffde 	bl	8000ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e17b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d030      	beq.n	8001c74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d016      	beq.n	8001c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x2b4>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7fe ffc2 	bl	8000ba8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c28:	f7fe ffbe 	bl	8000ba8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e15b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x200>
 8001c46:	e015      	b.n	8001c74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x2b4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7fe ffab 	bl	8000ba8 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c56:	f7fe ffa7 	bl	8000ba8 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e144      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a0 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_OscConfig+0x2b8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d121      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_RCC_OscConfig+0x2b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_RCC_OscConfig+0x2b8>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7fe ff6d 	bl	8000ba8 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e011      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2ce>
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	42470000 	.word	0x42470000
 8001cdc:	42470e80 	.word	0x42470e80
 8001ce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce4:	f7fe ff60 	bl	8000ba8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0fd      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b81      	ldr	r3, [pc, #516]	; (8001efc <HAL_RCC_OscConfig+0x4d4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
 8001d0a:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a7c      	ldr	r2, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	e01c      	b.n	8001d52 <HAL_RCC_OscConfig+0x32a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x312>
 8001d20:	4b77      	ldr	r3, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a76      	ldr	r2, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a73      	ldr	r2, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x32a>
 8001d3a:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a70      	ldr	r2, [pc, #448]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	4a6d      	ldr	r2, [pc, #436]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7fe ff25 	bl	8000ba8 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7fe ff21 	bl	8000ba8 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0bc      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ee      	beq.n	8001d62 <HAL_RCC_OscConfig+0x33a>
 8001d84:	e014      	b.n	8001db0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff0f 	bl	8000ba8 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe ff0b 	bl	8000ba8 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0a6      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ee      	bne.n	8001d8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8092 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d05c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d141      	bne.n	8001e64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <HAL_RCC_OscConfig+0x4dc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe fedf 	bl	8000ba8 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe fedb 	bl	8000ba8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e078      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	019b      	lsls	r3, r3, #6
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	061b      	lsls	r3, r3, #24
 8001e30:	4933      	ldr	r1, [pc, #204]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x4dc>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe feb4 	bl	8000ba8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe feb0 	bl	8000ba8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e04d      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x41c>
 8001e62:	e045      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x4dc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fe9d 	bl	8000ba8 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fe99 	bl	8000ba8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e036      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x44a>
 8001e90:	e02e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e029      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_RCC_OscConfig+0x4d8>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d115      	bne.n	8001eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d10d      	bne.n	8001eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40007000 	.word	0x40007000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470060 	.word	0x42470060

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0cc      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d90c      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b8      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	494d      	ldr	r1, [pc, #308]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d044      	beq.n	8002028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d119      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e07f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e067      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f023 0203 	bic.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4934      	ldr	r1, [pc, #208]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff8:	f7fe fdd6 	bl	8000ba8 <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7fe fdd2 	bl	8000ba8 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e04f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 020c 	and.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d1eb      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d20c      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e032      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4916      	ldr	r1, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208e:	f000 f821 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002092:	4601      	mov	r1, r0
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	fa21 f303 	lsr.w	r3, r1, r3
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fc7c 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00
 80020c4:	40023800 	.word	0x40023800
 80020c8:	08005348 	.word	0x08005348
 80020cc:	20000004 	.word	0x20000004
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d007      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x32>
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d008      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x38>
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80b4 	bne.w	8002268 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b5e      	ldr	r3, [pc, #376]	; (800227c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002102:	60bb      	str	r3, [r7, #8]
       break;
 8002104:	e0b3      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002106:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002108:	60bb      	str	r3, [r7, #8]
      break;
 800210a:	e0b0      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4b5a      	ldr	r3, [pc, #360]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002114:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002116:	4b58      	ldr	r3, [pc, #352]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d04a      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4b55      	ldr	r3, [pc, #340]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	f04f 0400 	mov.w	r4, #0
 800212c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	ea03 0501 	and.w	r5, r3, r1
 8002138:	ea04 0602 	and.w	r6, r4, r2
 800213c:	4629      	mov	r1, r5
 800213e:	4632      	mov	r2, r6
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	f04f 0400 	mov.w	r4, #0
 8002148:	0154      	lsls	r4, r2, #5
 800214a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800214e:	014b      	lsls	r3, r1, #5
 8002150:	4619      	mov	r1, r3
 8002152:	4622      	mov	r2, r4
 8002154:	1b49      	subs	r1, r1, r5
 8002156:	eb62 0206 	sbc.w	r2, r2, r6
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	f04f 0400 	mov.w	r4, #0
 8002162:	0194      	lsls	r4, r2, #6
 8002164:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002168:	018b      	lsls	r3, r1, #6
 800216a:	1a5b      	subs	r3, r3, r1
 800216c:	eb64 0402 	sbc.w	r4, r4, r2
 8002170:	f04f 0100 	mov.w	r1, #0
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	00e2      	lsls	r2, r4, #3
 800217a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800217e:	00d9      	lsls	r1, r3, #3
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	195b      	adds	r3, r3, r5
 8002186:	eb44 0406 	adc.w	r4, r4, r6
 800218a:	f04f 0100 	mov.w	r1, #0
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	0262      	lsls	r2, r4, #9
 8002194:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002198:	0259      	lsls	r1, r3, #9
 800219a:	460b      	mov	r3, r1
 800219c:	4614      	mov	r4, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	4621      	mov	r1, r4
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f04f 0400 	mov.w	r4, #0
 80021a8:	461a      	mov	r2, r3
 80021aa:	4623      	mov	r3, r4
 80021ac:	f7fe f810 	bl	80001d0 <__aeabi_uldivmod>
 80021b0:	4603      	mov	r3, r0
 80021b2:	460c      	mov	r4, r1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e049      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	f04f 0400 	mov.w	r4, #0
 80021c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	ea03 0501 	and.w	r5, r3, r1
 80021ce:	ea04 0602 	and.w	r6, r4, r2
 80021d2:	4629      	mov	r1, r5
 80021d4:	4632      	mov	r2, r6
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	f04f 0400 	mov.w	r4, #0
 80021de:	0154      	lsls	r4, r2, #5
 80021e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021e4:	014b      	lsls	r3, r1, #5
 80021e6:	4619      	mov	r1, r3
 80021e8:	4622      	mov	r2, r4
 80021ea:	1b49      	subs	r1, r1, r5
 80021ec:	eb62 0206 	sbc.w	r2, r2, r6
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	f04f 0400 	mov.w	r4, #0
 80021f8:	0194      	lsls	r4, r2, #6
 80021fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021fe:	018b      	lsls	r3, r1, #6
 8002200:	1a5b      	subs	r3, r3, r1
 8002202:	eb64 0402 	sbc.w	r4, r4, r2
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	00e2      	lsls	r2, r4, #3
 8002210:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002214:	00d9      	lsls	r1, r3, #3
 8002216:	460b      	mov	r3, r1
 8002218:	4614      	mov	r4, r2
 800221a:	195b      	adds	r3, r3, r5
 800221c:	eb44 0406 	adc.w	r4, r4, r6
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	02a2      	lsls	r2, r4, #10
 800222a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800222e:	0299      	lsls	r1, r3, #10
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	4618      	mov	r0, r3
 8002236:	4621      	mov	r1, r4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	461a      	mov	r2, r3
 8002240:	4623      	mov	r3, r4
 8002242:	f7fd ffc5 	bl	80001d0 <__aeabi_uldivmod>
 8002246:	4603      	mov	r3, r0
 8002248:	460c      	mov	r4, r1
 800224a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	3301      	adds	r3, #1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	60bb      	str	r3, [r7, #8]
      break;
 8002266:	e002      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800226a:	60bb      	str	r3, [r7, #8]
      break;
 800226c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226e:	68bb      	ldr	r3, [r7, #8]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	00f42400 	.word	0x00f42400
 8002280:	007a1200 	.word	0x007a1200

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCC_GetHCLKFreq+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022a0:	f7ff fff0 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a4:	4601      	mov	r1, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08005358 	.word	0x08005358

080022c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	220f      	movs	r2, #15
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_GetClockConfig+0x5c>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_RCC_GetClockConfig+0x5c>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCC_GetClockConfig+0x5c>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_GetClockConfig+0x5c>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	08db      	lsrs	r3, r3, #3
 80022fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_RCC_GetClockConfig+0x60>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 020f 	and.w	r2, r3, #15
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	601a      	str	r2, [r3, #0]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01d      	b.n	8002376 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f815 	bl	800237e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f000 f968 	bl	800263c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b06      	cmp	r3, #6
 80023ba:	d007      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d122      	bne.n	8002436 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d11b      	bne.n	8002436 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0202 	mvn.w	r2, #2
 8002406:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8ee 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 8002422:	e005      	b.n	8002430 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f8e0 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8f1 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d122      	bne.n	800248a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d11b      	bne.n	800248a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0204 	mvn.w	r2, #4
 800245a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8c4 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 8002476:	e005      	b.n	8002484 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8b6 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8c7 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b08      	cmp	r3, #8
 8002496:	d122      	bne.n	80024de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11b      	bne.n	80024de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0208 	mvn.w	r2, #8
 80024ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2204      	movs	r2, #4
 80024b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f89a 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 80024ca:	e005      	b.n	80024d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f88c 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f89d 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d122      	bne.n	8002532 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d11b      	bne.n	8002532 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f06f 0210 	mvn.w	r2, #16
 8002502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2208      	movs	r2, #8
 8002508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f870 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 800251e:	e005      	b.n	800252c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f862 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f873 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10e      	bne.n	800255e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0201 	mvn.w	r2, #1
 8002556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe f999 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d10e      	bne.n	800258a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d107      	bne.n	800258a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f903 	bl	8002790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d10e      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d107      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f838 	bl	8002626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d10e      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0220 	mvn.w	r2, #32
 80025da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8cd 	bl	800277c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a40      	ldr	r2, [pc, #256]	; (8002750 <TIM_Base_SetConfig+0x114>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265a:	d00f      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3d      	ldr	r2, [pc, #244]	; (8002754 <TIM_Base_SetConfig+0x118>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3c      	ldr	r2, [pc, #240]	; (8002758 <TIM_Base_SetConfig+0x11c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3b      	ldr	r2, [pc, #236]	; (800275c <TIM_Base_SetConfig+0x120>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3a      	ldr	r2, [pc, #232]	; (8002760 <TIM_Base_SetConfig+0x124>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <TIM_Base_SetConfig+0x114>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02b      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d027      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <TIM_Base_SetConfig+0x118>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d023      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <TIM_Base_SetConfig+0x11c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a2a      	ldr	r2, [pc, #168]	; (800275c <TIM_Base_SetConfig+0x120>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01b      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <TIM_Base_SetConfig+0x124>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d017      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <TIM_Base_SetConfig+0x128>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <TIM_Base_SetConfig+0x12c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00f      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <TIM_Base_SetConfig+0x130>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00b      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <TIM_Base_SetConfig+0x134>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <TIM_Base_SetConfig+0x138>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a23      	ldr	r2, [pc, #140]	; (8002778 <TIM_Base_SetConfig+0x13c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d108      	bne.n	8002700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <TIM_Base_SetConfig+0x114>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <TIM_Base_SetConfig+0xf8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <TIM_Base_SetConfig+0x124>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d103      	bne.n	800273c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	615a      	str	r2, [r3, #20]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40010400 	.word	0x40010400
 8002764:	40014000 	.word	0x40014000
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800
 8002770:	40001800 	.word	0x40001800
 8002774:	40001c00 	.word	0x40001c00
 8002778:	40002000 	.word	0x40002000

0800277c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b6:	2b84      	cmp	r3, #132	; 0x84
 80027b8:	d005      	beq.n	80027c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4413      	add	r3, r2
 80027c2:	3303      	adds	r3, #3
 80027c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027da:	f3ef 8305 	mrs	r3, IPSR
 80027de:	607b      	str	r3, [r7, #4]
  return(result);
 80027e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027fc:	f001 f826 	bl	800384c <vTaskStartScheduler>
  
  return osOK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}

08002806 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002808:	b089      	sub	sp, #36	; 0x24
 800280a:	af04      	add	r7, sp, #16
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <osThreadCreate+0x54>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685c      	ldr	r4, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681d      	ldr	r5, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691e      	ldr	r6, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ffb6 	bl	80027a4 <makeFreeRtosPriority>
 8002838:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002842:	9202      	str	r2, [sp, #8]
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	9100      	str	r1, [sp, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4632      	mov	r2, r6
 800284c:	4629      	mov	r1, r5
 800284e:	4620      	mov	r0, r4
 8002850:	f000 fe38 	bl	80034c4 <xTaskCreateStatic>
 8002854:	4603      	mov	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e01c      	b.n	8002894 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685c      	ldr	r4, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002866:	b29e      	uxth	r6, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff98 	bl	80027a4 <makeFreeRtosPriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	9200      	str	r2, [sp, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	4632      	mov	r2, r6
 8002882:	4629      	mov	r1, r5
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fe77 	bl	8003578 <xTaskCreate>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002894:	68fb      	ldr	r3, [r7, #12]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800289e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <osDelay+0x16>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	e000      	b.n	80028b6 <osDelay+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff94 	bl	80037e4 <vTaskDelay>
  
  return osOK;
 80028bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	460b      	mov	r3, r1
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d013      	beq.n	8002906 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <osTimerCreate+0x20>
 80028e4:	2101      	movs	r1, #1
 80028e6:	e000      	b.n	80028ea <osTimerCreate+0x22>
 80028e8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80028f2:	9201      	str	r2, [sp, #4]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	460a      	mov	r2, r1
 80028fa:	2101      	movs	r1, #1
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <osTimerCreate+0x64>)
 80028fe:	f001 fd4a 	bl	8004396 <xTimerCreateStatic>
 8002902:	4603      	mov	r3, r0
 8002904:	e00e      	b.n	8002924 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <osTimerCreate+0x48>
 800290c:	2201      	movs	r2, #1
 800290e:	e000      	b.n	8002912 <osTimerCreate+0x4a>
 8002910:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2101      	movs	r1, #1
 800291c:	4803      	ldr	r0, [pc, #12]	; (800292c <osTimerCreate+0x64>)
 800291e:	f001 fd19 	bl	8004354 <xTimerCreate>
 8002922:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	0800532c 	.word	0x0800532c

08002930 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <osTimerStart+0x20>
    ticks = 1;
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002950:	f7ff ff40 	bl	80027d4 <inHandlerMode>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01b      	beq.n	8002992 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800295a:	f107 020c 	add.w	r2, r7, #12
 800295e:	2300      	movs	r3, #0
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	2109      	movs	r1, #9
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f001 fd8b 	bl	8004484 <xTimerGenericCommand>
 800296e:	4603      	mov	r3, r0
 8002970:	2b01      	cmp	r3, #1
 8002972:	d002      	beq.n	800297a <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8002974:	23ff      	movs	r3, #255	; 0xff
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e018      	b.n	80029ac <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <osTimerStart+0x7c>
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <osTimerStart+0x88>)
 8002982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	e00c      	b.n	80029ac <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002992:	2300      	movs	r3, #0
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	2104      	movs	r1, #4
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f001 fd71 	bl	8004484 <xTimerGenericCommand>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d001      	beq.n	80029ac <osTimerStart+0x7c>
      result = osErrorOS;
 80029a8:	23ff      	movs	r3, #255	; 0xff
 80029aa:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80029ac:	697b      	ldr	r3, [r7, #20]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000ed04 	.word	0xe000ed04

080029bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f103 0208 	add.w	r2, r3, #8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0208 	add.w	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d103      	bne.n	8002a7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e00c      	b.n	8002a98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3308      	adds	r3, #8
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e002      	b.n	8002a8c <vListInsert+0x2e>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d2f6      	bcs.n	8002a86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6892      	ldr	r2, [r2, #8]
 8002ae6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6852      	ldr	r2, [r2, #4]
 8002af0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d103      	bne.n	8002b04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	1e5a      	subs	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	e7fe      	b.n	8002b4a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002b4c:	f002 f8a6 	bl	8004c9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	68f9      	ldr	r1, [r7, #12]
 8002b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	441a      	add	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d114      	bne.n	8002bcc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3310      	adds	r3, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f8ca 	bl	8003d48 <xTaskRemoveFromEventList>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <xQueueGenericReset+0xcc>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	e009      	b.n	8002be0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3310      	adds	r3, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fef3 	bl	80029bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3324      	adds	r3, #36	; 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff feee 	bl	80029bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002be0:	f002 f88a 	bl	8004cf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <xQueueGenericCreateStatic+0x28>
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1a:	e7fe      	b.n	8002c1a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <xQueueGenericCreateStatic+0x42>
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	e7fe      	b.n	8002c34 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <xQueueGenericCreateStatic+0x4e>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <xQueueGenericCreateStatic+0x52>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <xQueueGenericCreateStatic+0x54>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <xQueueGenericCreateStatic+0x6c>
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	e7fe      	b.n	8002c5e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <xQueueGenericCreateStatic+0x78>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <xQueueGenericCreateStatic+0x7c>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <xQueueGenericCreateStatic+0x7e>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <xQueueGenericCreateStatic+0x96>
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c8a:	2348      	movs	r3, #72	; 0x48
 8002c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b48      	cmp	r3, #72	; 0x48
 8002c92:	d009      	beq.n	8002ca8 <xQueueGenericCreateStatic+0xb4>
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ca8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cbc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f805 	bl	8002cda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3730      	adds	r7, #48	; 0x30
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e002      	b.n	8002cfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d08:	2101      	movs	r1, #1
 8002d0a:	69b8      	ldr	r0, [r7, #24]
 8002d0c:	f7ff ff0a 	bl	8002b24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <xQueueGenericSend+0x30>
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d46:	e7fe      	b.n	8002d46 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x3e>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <xQueueGenericSend+0x42>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueGenericSend+0x44>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <xQueueGenericSend+0x5c>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e7fe      	b.n	8002d72 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSend+0x6a>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSend+0x6e>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSend+0x70>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <xQueueGenericSend+0x88>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	e7fe      	b.n	8002d9e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da0:	f001 f988 	bl	80040b4 <xTaskGetSchedulerState>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <xQueueGenericSend+0x98>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <xQueueGenericSend+0x9c>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <xQueueGenericSend+0x9e>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <xQueueGenericSend+0xb6>
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dce:	f001 ff65 	bl	8004c9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <xQueueGenericSend+0xcc>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d129      	bne.n	8002e38 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dea:	f000 f9ff 	bl	80031ec <prvCopyDataToQueue>
 8002dee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 ffa3 	bl	8003d48 <xTaskRemoveFromEventList>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <xQueueGenericSend+0x1f0>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	e00a      	b.n	8002e30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <xQueueGenericSend+0x1f0>)
 8002e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e30:	f001 ff62 	bl	8004cf8 <vPortExitCritical>
				return pdPASS;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e063      	b.n	8002f00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e3e:	f001 ff5b 	bl	8004cf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e05c      	b.n	8002f00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 ffdb 	bl	8003e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e5a:	f001 ff4d 	bl	8004cf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e5e:	f000 fd59 	bl	8003914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e62:	f001 ff1b 	bl	8004c9c <vPortEnterCritical>
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d103      	bne.n	8002e7c <xQueueGenericSend+0x164>
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d103      	bne.n	8002e92 <xQueueGenericSend+0x17a>
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e92:	f001 ff31 	bl	8004cf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e96:	1d3a      	adds	r2, r7, #4
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ffca 	bl	8003e38 <xTaskCheckForTimeOut>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d124      	bne.n	8002ef4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eac:	f000 fa96 	bl	80033dc <prvIsQueueFull>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	3310      	adds	r3, #16
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fef4 	bl	8003cac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec6:	f000 fa21 	bl	800330c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eca:	f000 fd31 	bl	8003930 <xTaskResumeAll>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f47f af7c 	bne.w	8002dce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <xQueueGenericSend+0x1f0>)
 8002ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	e772      	b.n	8002dce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eea:	f000 fa0f 	bl	800330c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eee:	f000 fd1f 	bl	8003930 <xTaskResumeAll>
 8002ef2:	e76c      	b.n	8002dce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef6:	f000 fa09 	bl	800330c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efa:	f000 fd19 	bl	8003930 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002efe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3738      	adds	r7, #56	; 0x38
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <xQueueGenericSendFromISR+0x2c>
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	e7fe      	b.n	8002f36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <xQueueGenericSendFromISR+0x3a>
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <xQueueGenericSendFromISR+0x3e>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <xQueueGenericSendFromISR+0x40>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <xQueueGenericSendFromISR+0x58>
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	e7fe      	b.n	8002f62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d103      	bne.n	8002f72 <xQueueGenericSendFromISR+0x66>
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <xQueueGenericSendFromISR+0x6a>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <xQueueGenericSendFromISR+0x6c>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <xQueueGenericSendFromISR+0x84>
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e7fe      	b.n	8002f8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f90:	f001 ff60 	bl	8004e54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f94:	f3ef 8211 	mrs	r2, BASEPRI
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	61ba      	str	r2, [r7, #24]
 8002faa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <xQueueGenericSendFromISR+0xb6>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d12c      	bne.n	800301c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd2:	f000 f90b 	bl	80031ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d112      	bne.n	8003006 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d016      	beq.n	8003016 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	3324      	adds	r3, #36	; 0x24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 feab 	bl	8003d48 <xTaskRemoveFromEventList>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00e      	beq.n	8003016 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e007      	b.n	8003016 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800300a:	3301      	adds	r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	b25a      	sxtb	r2, r3
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003016:	2301      	movs	r3, #1
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800301a:	e001      	b.n	8003020 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800302c:	4618      	mov	r0, r3
 800302e:	3738      	adds	r7, #56	; 0x38
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <xQueueReceive+0x2e>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	e7fe      	b.n	8003060 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <xQueueReceive+0x3c>
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <xQueueReceive+0x40>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <xQueueReceive+0x42>
 8003074:	2300      	movs	r3, #0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <xQueueReceive+0x5a>
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	e7fe      	b.n	800308c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800308e:	f001 f811 	bl	80040b4 <xTaskGetSchedulerState>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <xQueueReceive+0x6a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <xQueueReceive+0x6e>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <xQueueReceive+0x70>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <xQueueReceive+0x88>
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e7fe      	b.n	80030ba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030bc:	f001 fdee 	bl	8004c9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01f      	beq.n	800310c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d0:	f000 f8f6 	bl	80032c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00f      	beq.n	8003104 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	3310      	adds	r3, #16
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe2d 	bl	8003d48 <xTaskRemoveFromEventList>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030f4:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <xQueueReceive+0x1b4>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003104:	f001 fdf8 	bl	8004cf8 <vPortExitCritical>
				return pdPASS;
 8003108:	2301      	movs	r3, #1
 800310a:	e069      	b.n	80031e0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003112:	f001 fdf1 	bl	8004cf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003116:	2300      	movs	r3, #0
 8003118:	e062      	b.n	80031e0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fe71 	bl	8003e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800312e:	f001 fde3 	bl	8004cf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003132:	f000 fbef 	bl	8003914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003136:	f001 fdb1 	bl	8004c9c <vPortEnterCritical>
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003140:	b25b      	sxtb	r3, r3
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d103      	bne.n	8003150 <xQueueReceive+0x11c>
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003156:	b25b      	sxtb	r3, r3
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d103      	bne.n	8003166 <xQueueReceive+0x132>
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003166:	f001 fdc7 	bl	8004cf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800316a:	1d3a      	adds	r2, r7, #4
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fe60 	bl	8003e38 <xTaskCheckForTimeOut>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d123      	bne.n	80031c6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800317e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003180:	f000 f916 	bl	80033b0 <prvIsQueueEmpty>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	3324      	adds	r3, #36	; 0x24
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fd8a 	bl	8003cac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319a:	f000 f8b7 	bl	800330c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800319e:	f000 fbc7 	bl	8003930 <xTaskResumeAll>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d189      	bne.n	80030bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <xQueueReceive+0x1b4>)
 80031aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	e780      	b.n	80030bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031bc:	f000 f8a6 	bl	800330c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031c0:	f000 fbb6 	bl	8003930 <xTaskResumeAll>
 80031c4:	e77a      	b.n	80030bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c8:	f000 f8a0 	bl	800330c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031cc:	f000 fbb0 	bl	8003930 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d2:	f000 f8ed 	bl	80033b0 <prvIsQueueEmpty>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f43f af6f 	beq.w	80030bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3730      	adds	r7, #48	; 0x30
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	e000ed04 	.word	0xe000ed04

080031ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d14d      	bne.n	80032ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ff6a 	bl	80040f0 <xTaskPriorityDisinherit>
 800321c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	e043      	b.n	80032ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d119      	bne.n	8003260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6858      	ldr	r0, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	461a      	mov	r2, r3
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	f002 f844 	bl	80052c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d32b      	bcc.n	80032ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	e026      	b.n	80032ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68d8      	ldr	r0, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	461a      	mov	r2, r3
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	f002 f82a 	bl	80052c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	425b      	negs	r3, r3
 800327a:	441a      	add	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d207      	bcs.n	800329c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	425b      	negs	r3, r3
 8003296:	441a      	add	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d105      	bne.n	80032ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032b6:	697b      	ldr	r3, [r7, #20]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	441a      	add	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d303      	bcc.n	80032f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	461a      	mov	r2, r3
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f001 ffe0 	bl	80052c4 <memcpy>
	}
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003314:	f001 fcc2 	bl	8004c9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800331e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003320:	e011      	b.n	8003346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d012      	beq.n	8003350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd0a 	bl	8003d48 <xTaskRemoveFromEventList>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800333a:	f000 fddd 	bl	8003ef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	3b01      	subs	r3, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	dce9      	bgt.n	8003322 <prvUnlockQueue+0x16>
 800334e:	e000      	b.n	8003352 <prvUnlockQueue+0x46>
					break;
 8003350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	22ff      	movs	r2, #255	; 0xff
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800335a:	f001 fccd 	bl	8004cf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800335e:	f001 fc9d 	bl	8004c9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800336a:	e011      	b.n	8003390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3310      	adds	r3, #16
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fce5 	bl	8003d48 <xTaskRemoveFromEventList>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003384:	f000 fdb8 	bl	8003ef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003388:	7bbb      	ldrb	r3, [r7, #14]
 800338a:	3b01      	subs	r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003394:	2b00      	cmp	r3, #0
 8003396:	dce9      	bgt.n	800336c <prvUnlockQueue+0x60>
 8003398:	e000      	b.n	800339c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800339a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	22ff      	movs	r2, #255	; 0xff
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033a4:	f001 fca8 	bl	8004cf8 <vPortExitCritical>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033b8:	f001 fc70 	bl	8004c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e001      	b.n	80033ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ce:	f001 fc93 	bl	8004cf8 <vPortExitCritical>

	return xReturn;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033e4:	f001 fc5a 	bl	8004c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d102      	bne.n	80033fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033f4:	2301      	movs	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e001      	b.n	80033fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033fe:	f001 fc7b 	bl	8004cf8 <vPortExitCritical>

	return xReturn;
 8003402:	68fb      	ldr	r3, [r7, #12]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e014      	b.n	8003446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <vQueueAddToRegistry+0x4c>)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003428:	490b      	ldr	r1, [pc, #44]	; (8003458 <vQueueAddToRegistry+0x4c>)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <vQueueAddToRegistry+0x4c>)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800343e:	e005      	b.n	800344c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b07      	cmp	r3, #7
 800344a:	d9e7      	bls.n	800341c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	200045b8 	.word	0x200045b8

0800345c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800346c:	f001 fc16 	bl	8004c9c <vPortEnterCritical>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003476:	b25b      	sxtb	r3, r3
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d103      	bne.n	8003486 <vQueueWaitForMessageRestricted+0x2a>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348c:	b25b      	sxtb	r3, r3
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d103      	bne.n	800349c <vQueueWaitForMessageRestricted+0x40>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800349c:	f001 fc2c 	bl	8004cf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3324      	adds	r3, #36	; 0x24
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fc1f 	bl	8003cf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff28 	bl	800330c <prvUnlockQueue>
	}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08e      	sub	sp, #56	; 0x38
 80034c8:	af04      	add	r7, sp, #16
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <xTaskCreateStatic+0x28>
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	e7fe      	b.n	80034ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <xTaskCreateStatic+0x42>
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	e7fe      	b.n	8003504 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003506:	2354      	movs	r3, #84	; 0x54
 8003508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b54      	cmp	r3, #84	; 0x54
 800350e:	d009      	beq.n	8003524 <xTaskCreateStatic+0x60>
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e7fe      	b.n	8003522 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003524:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01e      	beq.n	800356a <xTaskCreateStatic+0xa6>
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01b      	beq.n	800356a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003544:	2300      	movs	r3, #0
 8003546:	9303      	str	r3, [sp, #12]
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	9302      	str	r3, [sp, #8]
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f850 	bl	8003602 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003564:	f000 f8d4 	bl	8003710 <prvAddNewTaskToReadyList>
 8003568:	e001      	b.n	800356e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800356e:	697b      	ldr	r3, [r7, #20]
	}
 8003570:	4618      	mov	r0, r3
 8003572:	3728      	adds	r7, #40	; 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af04      	add	r7, sp, #16
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fc9f 	bl	8004ed0 <pvPortMalloc>
 8003592:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00e      	beq.n	80035b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800359a:	2054      	movs	r0, #84	; 0x54
 800359c:	f001 fc98 	bl	8004ed0 <pvPortMalloc>
 80035a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
 80035ae:	e005      	b.n	80035bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035b0:	6978      	ldr	r0, [r7, #20]
 80035b2:	f001 fd4f 	bl	8005054 <vPortFree>
 80035b6:	e001      	b.n	80035bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d017      	beq.n	80035f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	2300      	movs	r3, #0
 80035ce:	9303      	str	r3, [sp, #12]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	9302      	str	r3, [sp, #8]
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f80e 	bl	8003602 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035e6:	69f8      	ldr	r0, [r7, #28]
 80035e8:	f000 f892 	bl	8003710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	e002      	b.n	80035f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035f8:	69bb      	ldr	r3, [r7, #24]
	}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b088      	sub	sp, #32
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800361a:	3b01      	subs	r3, #1
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f023 0307 	bic.w	r3, r3, #7
 8003628:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <prvInitialiseNewTask+0x46>
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e7fe      	b.n	8003646 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01f      	beq.n	800368e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	e012      	b.n	800367a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	7819      	ldrb	r1, [r3, #0]
 800365c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	3334      	adds	r3, #52	; 0x34
 8003664:	460a      	mov	r2, r1
 8003666:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d006      	beq.n	8003682 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3301      	adds	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d9e9      	bls.n	8003654 <prvInitialiseNewTask+0x52>
 8003680:	e000      	b.n	8003684 <prvInitialiseNewTask+0x82>
			{
				break;
 8003682:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800368c:	e003      	b.n	8003696 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	2b06      	cmp	r3, #6
 800369a:	d901      	bls.n	80036a0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800369c:	2306      	movs	r3, #6
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	2200      	movs	r2, #0
 80036b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	3304      	adds	r3, #4
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff f9a0 	bl	80029fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	3318      	adds	r3, #24
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f99b 	bl	80029fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	f1c3 0207 	rsb	r2, r3, #7
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	2200      	movs	r2, #0
 80036e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	68f9      	ldr	r1, [r7, #12]
 80036ee:	69b8      	ldr	r0, [r7, #24]
 80036f0:	f001 f9ae 	bl	8004a50 <pxPortInitialiseStack>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003706:	bf00      	nop
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003718:	f001 fac0 	bl	8004c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <prvAddNewTaskToReadyList+0xb8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <prvAddNewTaskToReadyList+0xb8>)
 8003724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <prvAddNewTaskToReadyList+0xbc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800372e:	4a27      	ldr	r2, [pc, #156]	; (80037cc <prvAddNewTaskToReadyList+0xbc>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003734:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <prvAddNewTaskToReadyList+0xb8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d110      	bne.n	800375e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800373c:	f000 fc00 	bl	8003f40 <prvInitialiseTaskLists>
 8003740:	e00d      	b.n	800375e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <prvAddNewTaskToReadyList+0xc0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <prvAddNewTaskToReadyList+0xbc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	429a      	cmp	r2, r3
 8003756:	d802      	bhi.n	800375e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <prvAddNewTaskToReadyList+0xbc>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <prvAddNewTaskToReadyList+0xc4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <prvAddNewTaskToReadyList+0xc4>)
 8003766:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <prvAddNewTaskToReadyList+0xc8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <prvAddNewTaskToReadyList+0xc8>)
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4a15      	ldr	r2, [pc, #84]	; (80037dc <prvAddNewTaskToReadyList+0xcc>)
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7ff f940 	bl	8002a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003796:	f001 faaf 	bl	8004cf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <prvAddNewTaskToReadyList+0xc0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <prvAddNewTaskToReadyList+0xbc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d207      	bcs.n	80037c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <prvAddNewTaskToReadyList+0xd0>)
 80037b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200007d8 	.word	0x200007d8
 80037cc:	200006d8 	.word	0x200006d8
 80037d0:	200007e4 	.word	0x200007e4
 80037d4:	200007f4 	.word	0x200007f4
 80037d8:	200007e0 	.word	0x200007e0
 80037dc:	200006dc 	.word	0x200006dc
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <vTaskDelay+0x60>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <vTaskDelay+0x2e>
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	e7fe      	b.n	8003810 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003812:	f000 f87f 	bl	8003914 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003816:	2100      	movs	r1, #0
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fced 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800381e:	f000 f887 	bl	8003930 <xTaskResumeAll>
 8003822:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <vTaskDelay+0x64>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000800 	.word	0x20000800
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800385a:	463a      	mov	r2, r7
 800385c:	1d39      	adds	r1, r7, #4
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4618      	mov	r0, r3
 8003864:	f7fc fe34 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	9202      	str	r2, [sp, #8]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	460a      	mov	r2, r1
 800387a:	4920      	ldr	r1, [pc, #128]	; (80038fc <vTaskStartScheduler+0xb0>)
 800387c:	4820      	ldr	r0, [pc, #128]	; (8003900 <vTaskStartScheduler+0xb4>)
 800387e:	f7ff fe21 	bl	80034c4 <xTaskCreateStatic>
 8003882:	4602      	mov	r2, r0
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <vTaskStartScheduler+0xb8>)
 8003886:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003888:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <vTaskStartScheduler+0xb8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e001      	b.n	800389a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038a0:	f000 fd10 	bl	80042c4 <xTimerCreateTimerTask>
 80038a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d115      	bne.n	80038d8 <vTaskStartScheduler+0x8c>
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <vTaskStartScheduler+0xbc>)
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <vTaskStartScheduler+0xc0>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <vTaskStartScheduler+0xc4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038d2:	f001 f945 	bl	8004b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038d6:	e00d      	b.n	80038f4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d109      	bne.n	80038f4 <vTaskStartScheduler+0xa8>
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	e7fe      	b.n	80038f2 <vTaskStartScheduler+0xa6>
}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08005330 	.word	0x08005330
 8003900:	08003f11 	.word	0x08003f11
 8003904:	200007fc 	.word	0x200007fc
 8003908:	200007f8 	.word	0x200007f8
 800390c:	200007e4 	.word	0x200007e4
 8003910:	200007dc 	.word	0x200007dc

08003914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <vTaskSuspendAll+0x18>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a03      	ldr	r2, [pc, #12]	; (800392c <vTaskSuspendAll+0x18>)
 8003920:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	20000800 	.word	0x20000800

08003930 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <xTaskResumeAll+0x114>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <xTaskResumeAll+0x2a>
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	e7fe      	b.n	8003958 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800395a:	f001 f99f 	bl	8004c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800395e:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <xTaskResumeAll+0x114>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3b01      	subs	r3, #1
 8003964:	4a37      	ldr	r2, [pc, #220]	; (8003a44 <xTaskResumeAll+0x114>)
 8003966:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <xTaskResumeAll+0x114>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d161      	bne.n	8003a34 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <xTaskResumeAll+0x118>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d05d      	beq.n	8003a34 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003978:	e02e      	b.n	80039d8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397a:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <xTaskResumeAll+0x11c>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3318      	adds	r3, #24
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f8a2 	bl	8002ad0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3304      	adds	r3, #4
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f89d 	bl	8002ad0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	2201      	movs	r2, #1
 800399c:	409a      	lsls	r2, r3
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <xTaskResumeAll+0x120>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <xTaskResumeAll+0x120>)
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4a27      	ldr	r2, [pc, #156]	; (8003a54 <xTaskResumeAll+0x124>)
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f7ff f829 	bl	8002a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <xTaskResumeAll+0x128>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <xTaskResumeAll+0x12c>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039d8:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <xTaskResumeAll+0x11c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1cc      	bne.n	800397a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039e6:	f000 fb45 	bl	8004074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <xTaskResumeAll+0x130>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039f6:	f000 f847 	bl	8003a88 <xTaskIncrementTick>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <xTaskResumeAll+0x12c>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f1      	bne.n	80039f6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <xTaskResumeAll+0x130>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <xTaskResumeAll+0x12c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <xTaskResumeAll+0x134>)
 8003a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a34:	f001 f960 	bl	8004cf8 <vPortExitCritical>

	return xAlreadyYielded;
 8003a38:	68bb      	ldr	r3, [r7, #8]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000800 	.word	0x20000800
 8003a48:	200007d8 	.word	0x200007d8
 8003a4c:	20000798 	.word	0x20000798
 8003a50:	200007e0 	.word	0x200007e0
 8003a54:	200006dc 	.word	0x200006dc
 8003a58:	200006d8 	.word	0x200006d8
 8003a5c:	200007ec 	.word	0x200007ec
 8003a60:	200007e8 	.word	0x200007e8
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <xTaskGetTickCount+0x1c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a74:	687b      	ldr	r3, [r7, #4]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	200007dc 	.word	0x200007dc

08003a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a92:	4b4e      	ldr	r3, [pc, #312]	; (8003bcc <xTaskIncrementTick+0x144>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 8087 	bne.w	8003baa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a9c:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <xTaskIncrementTick+0x148>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003aa4:	4a4a      	ldr	r2, [pc, #296]	; (8003bd0 <xTaskIncrementTick+0x148>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11f      	bne.n	8003af0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ab0:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <xTaskIncrementTick+0x14c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <xTaskIncrementTick+0x46>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	e7fe      	b.n	8003acc <xTaskIncrementTick+0x44>
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <xTaskIncrementTick+0x14c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3e      	ldr	r2, [pc, #248]	; (8003bd4 <xTaskIncrementTick+0x14c>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4a3e      	ldr	r2, [pc, #248]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	4a3c      	ldr	r2, [pc, #240]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	f000 fac2 	bl	8004074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003af0:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d348      	bcc.n	8003b8c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <xTaskIncrementTick+0x14c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003b06:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0a:	601a      	str	r2, [r3, #0]
					break;
 8003b0c:	e03e      	b.n	8003b8c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b0e:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <xTaskIncrementTick+0x14c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d203      	bcs.n	8003b2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b26:	4a2e      	ldr	r2, [pc, #184]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b2c:	e02e      	b.n	8003b8c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe ffcc 	bl	8002ad0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3318      	adds	r3, #24
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe ffc3 	bl	8002ad0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7fe ff4f 	bl	8002a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3b9      	bcc.n	8003afa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003b86:	2301      	movs	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8a:	e7b6      	b.n	8003afa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	4915      	ldr	r1, [pc, #84]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d907      	bls.n	8003bb4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e004      	b.n	8003bb4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003bb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <xTaskIncrementTick+0x16c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000800 	.word	0x20000800
 8003bd0:	200007dc 	.word	0x200007dc
 8003bd4:	20000790 	.word	0x20000790
 8003bd8:	20000794 	.word	0x20000794
 8003bdc:	200007f0 	.word	0x200007f0
 8003be0:	200007f8 	.word	0x200007f8
 8003be4:	200007e0 	.word	0x200007e0
 8003be8:	200006dc 	.word	0x200006dc
 8003bec:	200006d8 	.word	0x200006d8
 8003bf0:	200007e8 	.word	0x200007e8
 8003bf4:	200007ec 	.word	0x200007ec

08003bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bfe:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <vTaskSwitchContext+0xa0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c06:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <vTaskSwitchContext+0xa4>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c0c:	e03e      	b.n	8003c8c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <vTaskSwitchContext+0xa4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <vTaskSwitchContext+0xa8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	f1c3 031f 	rsb	r3, r3, #31
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	491e      	ldr	r1, [pc, #120]	; (8003ca4 <vTaskSwitchContext+0xac>)
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	e7fe      	b.n	8003c50 <vTaskSwitchContext+0x58>
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <vTaskSwitchContext+0xac>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	3308      	adds	r3, #8
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d104      	bne.n	8003c82 <vTaskSwitchContext+0x8a>
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <vTaskSwitchContext+0xb0>)
 8003c8a:	6013      	str	r3, [r2, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	20000800 	.word	0x20000800
 8003c9c:	200007ec 	.word	0x200007ec
 8003ca0:	200007e0 	.word	0x200007e0
 8003ca4:	200006dc 	.word	0x200006dc
 8003ca8:	200006d8 	.word	0x200006d8

08003cac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <vTaskPlaceOnEventList+0x24>
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e7fe      	b.n	8003cce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <vTaskPlaceOnEventList+0x44>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3318      	adds	r3, #24
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7fe fec0 	bl	8002a5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cde:	2101      	movs	r1, #1
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	f000 fa89 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200006d8 	.word	0x200006d8

08003cf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <vTaskPlaceOnEventListRestricted+0x26>
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e7fe      	b.n	8003d18 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <vTaskPlaceOnEventListRestricted+0x50>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3318      	adds	r3, #24
 8003d20:	4619      	mov	r1, r3
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7fe fe77 	bl	8002a16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	68b8      	ldr	r0, [r7, #8]
 8003d38:	f000 fa5e 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
	}
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200006d8 	.word	0x200006d8

08003d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <xTaskRemoveFromEventList+0x2a>
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e7fe      	b.n	8003d70 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3318      	adds	r3, #24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe feaa 	bl	8002ad0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <xTaskRemoveFromEventList+0xac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11c      	bne.n	8003dbe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fea1 	bl	8002ad0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	2201      	movs	r2, #1
 8003d94:	409a      	lsls	r2, r3
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <xTaskRemoveFromEventList+0xb0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <xTaskRemoveFromEventList+0xb0>)
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <xTaskRemoveFromEventList+0xb4>)
 8003dae:	441a      	add	r2, r3
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7fe fe2d 	bl	8002a16 <vListInsertEnd>
 8003dbc:	e005      	b.n	8003dca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3318      	adds	r3, #24
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	480e      	ldr	r0, [pc, #56]	; (8003e00 <xTaskRemoveFromEventList+0xb8>)
 8003dc6:	f7fe fe26 	bl	8002a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <xTaskRemoveFromEventList+0xbc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d905      	bls.n	8003de4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <xTaskRemoveFromEventList+0xc0>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e001      	b.n	8003de8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003de8:	697b      	ldr	r3, [r7, #20]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000800 	.word	0x20000800
 8003df8:	200007e0 	.word	0x200007e0
 8003dfc:	200006dc 	.word	0x200006dc
 8003e00:	20000798 	.word	0x20000798
 8003e04:	200006d8 	.word	0x200006d8
 8003e08:	200007ec 	.word	0x200007ec

08003e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <vTaskInternalSetTimeOutState+0x24>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <vTaskInternalSetTimeOutState+0x28>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	200007f0 	.word	0x200007f0
 8003e34:	200007dc 	.word	0x200007dc

08003e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <xTaskCheckForTimeOut+0x24>
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	e7fe      	b.n	8003e5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <xTaskCheckForTimeOut+0x3e>
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e7fe      	b.n	8003e74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003e76:	f000 ff11 	bl	8004c9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <xTaskCheckForTimeOut+0xb8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d102      	bne.n	8003e9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	e023      	b.n	8003ee2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <xTaskCheckForTimeOut+0xbc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d007      	beq.n	8003eb6 <xTaskCheckForTimeOut+0x7e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	e015      	b.n	8003ee2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d20b      	bcs.n	8003ed8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ff9d 	bl	8003e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e004      	b.n	8003ee2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ee2:	f000 ff09 	bl	8004cf8 <vPortExitCritical>

	return xReturn;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200007dc 	.word	0x200007dc
 8003ef4:	200007f0 	.word	0x200007f0

08003ef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <vTaskMissedYield+0x14>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	200007ec 	.word	0x200007ec

08003f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f18:	f000 f852 	bl	8003fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <prvIdleTask+0x28>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d9f9      	bls.n	8003f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <prvIdleTask+0x2c>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f34:	e7f0      	b.n	8003f18 <prvIdleTask+0x8>
 8003f36:	bf00      	nop
 8003f38:	200006dc 	.word	0x200006dc
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	e00c      	b.n	8003f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <prvInitialiseTaskLists+0x60>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fd2e 	bl	80029bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3301      	adds	r3, #1
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d9ef      	bls.n	8003f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f6c:	480d      	ldr	r0, [pc, #52]	; (8003fa4 <prvInitialiseTaskLists+0x64>)
 8003f6e:	f7fe fd25 	bl	80029bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f72:	480d      	ldr	r0, [pc, #52]	; (8003fa8 <prvInitialiseTaskLists+0x68>)
 8003f74:	f7fe fd22 	bl	80029bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f78:	480c      	ldr	r0, [pc, #48]	; (8003fac <prvInitialiseTaskLists+0x6c>)
 8003f7a:	f7fe fd1f 	bl	80029bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f7e:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <prvInitialiseTaskLists+0x70>)
 8003f80:	f7fe fd1c 	bl	80029bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f84:	480b      	ldr	r0, [pc, #44]	; (8003fb4 <prvInitialiseTaskLists+0x74>)
 8003f86:	f7fe fd19 	bl	80029bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <prvInitialiseTaskLists+0x78>)
 8003f8c:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <prvInitialiseTaskLists+0x64>)
 8003f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <prvInitialiseTaskLists+0x7c>)
 8003f92:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <prvInitialiseTaskLists+0x68>)
 8003f94:	601a      	str	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200006dc 	.word	0x200006dc
 8003fa4:	20000768 	.word	0x20000768
 8003fa8:	2000077c 	.word	0x2000077c
 8003fac:	20000798 	.word	0x20000798
 8003fb0:	200007ac 	.word	0x200007ac
 8003fb4:	200007c4 	.word	0x200007c4
 8003fb8:	20000790 	.word	0x20000790
 8003fbc:	20000794 	.word	0x20000794

08003fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fc6:	e019      	b.n	8003ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fc8:	f000 fe68 	bl	8004c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <prvCheckTasksWaitingTermination+0x4c>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fd79 	bl	8002ad0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <prvCheckTasksWaitingTermination+0x50>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <prvCheckTasksWaitingTermination+0x50>)
 8003fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <prvCheckTasksWaitingTermination+0x54>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <prvCheckTasksWaitingTermination+0x54>)
 8003ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ff2:	f000 fe81 	bl	8004cf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f80e 	bl	8004018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <prvCheckTasksWaitingTermination+0x54>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e1      	bne.n	8003fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	200007ac 	.word	0x200007ac
 8004010:	200007d8 	.word	0x200007d8
 8004014:	200007c0 	.word	0x200007c0

08004018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4618      	mov	r0, r3
 8004030:	f001 f810 	bl	8005054 <vPortFree>
				vPortFree( pxTCB );
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f001 f80d 	bl	8005054 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800403a:	e017      	b.n	800406c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004042:	2b01      	cmp	r3, #1
 8004044:	d103      	bne.n	800404e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 f804 	bl	8005054 <vPortFree>
	}
 800404c:	e00e      	b.n	800406c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004054:	2b02      	cmp	r3, #2
 8004056:	d009      	beq.n	800406c <prvDeleteTCB+0x54>
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e7fe      	b.n	800406a <prvDeleteTCB+0x52>
	}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <prvResetNextTaskUnblockTime+0x38>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800408c:	e008      	b.n	80040a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <prvResetNextTaskUnblockTime+0x38>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <prvResetNextTaskUnblockTime+0x3c>)
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	20000790 	.word	0x20000790
 80040b0:	200007f8 	.word	0x200007f8

080040b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <xTaskGetSchedulerState+0x34>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040c2:	2301      	movs	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	e008      	b.n	80040da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <xTaskGetSchedulerState+0x38>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040d0:	2302      	movs	r3, #2
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e001      	b.n	80040da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040da:	687b      	ldr	r3, [r7, #4]
	}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	200007e4 	.word	0x200007e4
 80040ec:	20000800 	.word	0x20000800

080040f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d06c      	beq.n	80041e0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004106:	4b39      	ldr	r3, [pc, #228]	; (80041ec <xTaskPriorityDisinherit+0xfc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	429a      	cmp	r2, r3
 800410e:	d009      	beq.n	8004124 <xTaskPriorityDisinherit+0x34>
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e7fe      	b.n	8004122 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <xTaskPriorityDisinherit+0x50>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	e7fe      	b.n	800413e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	429a      	cmp	r2, r3
 8004154:	d044      	beq.n	80041e0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	2b00      	cmp	r3, #0
 800415c:	d140      	bne.n	80041e0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fcb4 	bl	8002ad0 <uxListRemove>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004172:	491f      	ldr	r1, [pc, #124]	; (80041f0 <xTaskPriorityDisinherit+0x100>)
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xTaskPriorityDisinherit+0xaa>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <xTaskPriorityDisinherit+0x104>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4013      	ands	r3, r2
 8004196:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <xTaskPriorityDisinherit+0x104>)
 8004198:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f1c3 0207 	rsb	r2, r3, #7
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	2201      	movs	r2, #1
 80041b4:	409a      	lsls	r2, r3
 80041b6:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <xTaskPriorityDisinherit+0x104>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <xTaskPriorityDisinherit+0x104>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <xTaskPriorityDisinherit+0x100>)
 80041ce:	441a      	add	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fe fc1d 	bl	8002a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041e0:	697b      	ldr	r3, [r7, #20]
	}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200006d8 	.word	0x200006d8
 80041f0:	200006dc 	.word	0x200006dc
 80041f4:	200007e0 	.word	0x200007e0

080041f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004202:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004208:	4b28      	ldr	r3, [pc, #160]	; (80042ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fc5e 	bl	8002ad0 <uxListRemove>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800421a:	4b24      	ldr	r3, [pc, #144]	; (80042ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	2201      	movs	r2, #1
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4013      	ands	r3, r2
 800422e:	4a20      	ldr	r2, [pc, #128]	; (80042b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004230:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d10a      	bne.n	8004250 <prvAddCurrentTaskToDelayedList+0x58>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	481a      	ldr	r0, [pc, #104]	; (80042b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800424a:	f7fe fbe4 	bl	8002a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800424e:	e026      	b.n	800429e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d209      	bcs.n	800427c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe fbf2 	bl	8002a5e <vListInsert>
}
 800427a:	e010      	b.n	800429e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7fe fbe8 	bl	8002a5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d202      	bcs.n	800429e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004298:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6013      	str	r3, [r2, #0]
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200007dc 	.word	0x200007dc
 80042ac:	200006d8 	.word	0x200006d8
 80042b0:	200007e0 	.word	0x200007e0
 80042b4:	200007c4 	.word	0x200007c4
 80042b8:	20000794 	.word	0x20000794
 80042bc:	20000790 	.word	0x20000790
 80042c0:	200007f8 	.word	0x200007f8

080042c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042ce:	f000 fb7f 	bl	80049d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042d2:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <xTimerCreateTimerTask+0x80>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d021      	beq.n	800431e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042e2:	1d3a      	adds	r2, r7, #4
 80042e4:	f107 0108 	add.w	r1, r7, #8
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc f909 	bl	8000504 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	9202      	str	r2, [sp, #8]
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	2302      	movs	r3, #2
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	460a      	mov	r2, r1
 8004304:	4910      	ldr	r1, [pc, #64]	; (8004348 <xTimerCreateTimerTask+0x84>)
 8004306:	4811      	ldr	r0, [pc, #68]	; (800434c <xTimerCreateTimerTask+0x88>)
 8004308:	f7ff f8dc 	bl	80034c4 <xTaskCreateStatic>
 800430c:	4602      	mov	r2, r0
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <xTimerCreateTimerTask+0x8c>)
 8004310:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004312:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <xTimerCreateTimerTask+0x8c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800431a:	2301      	movs	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <xTimerCreateTimerTask+0x74>
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e7fe      	b.n	8004336 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004338:	697b      	ldr	r3, [r7, #20]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000834 	.word	0x20000834
 8004348:	08005338 	.word	0x08005338
 800434c:	080045b5 	.word	0x080045b5
 8004350:	20000838 	.word	0x20000838

08004354 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004362:	2028      	movs	r0, #40	; 0x28
 8004364:	f000 fdb4 	bl	8004ed0 <pvPortMalloc>
 8004368:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00d      	beq.n	800438c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f841 	bl	800440e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800438c:	697b      	ldr	r3, [r7, #20]
	}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004396:	b580      	push	{r7, lr}
 8004398:	b08a      	sub	sp, #40	; 0x28
 800439a:	af02      	add	r7, sp, #8
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80043a4:	2328      	movs	r3, #40	; 0x28
 80043a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b28      	cmp	r3, #40	; 0x28
 80043ac:	d009      	beq.n	80043c2 <xTimerCreateStatic+0x2c>
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e7fe      	b.n	80043c0 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <xTimerCreateStatic+0x48>
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e7fe      	b.n	80043dc <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f805 	bl	800440e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004404:	69fb      	ldr	r3, [r7, #28]
	}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <prvInitialiseNewTimer+0x28>
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e7fe      	b.n	8004434 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01e      	beq.n	800447a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800443c:	f000 fac8 	bl	80049d0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe facd 	bl	80029fc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800446e:	f043 0304 	orr.w	r3, r3, #4
 8004472:	b2da      	uxtb	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <xTimerGenericCommand+0x2c>
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	e7fe      	b.n	80044ae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044b0:	4b19      	ldr	r3, [pc, #100]	; (8004518 <xTimerGenericCommand+0x94>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02a      	beq.n	800450e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	dc18      	bgt.n	80044fc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044ca:	f7ff fdf3 	bl	80040b4 <xTaskGetSchedulerState>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d109      	bne.n	80044e8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <xTimerGenericCommand+0x94>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	f107 0114 	add.w	r1, r7, #20
 80044dc:	2300      	movs	r3, #0
 80044de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e0:	f7fe fc1a 	bl	8002d18 <xQueueGenericSend>
 80044e4:	6278      	str	r0, [r7, #36]	; 0x24
 80044e6:	e012      	b.n	800450e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <xTimerGenericCommand+0x94>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	f107 0114 	add.w	r1, r7, #20
 80044f0:	2300      	movs	r3, #0
 80044f2:	2200      	movs	r2, #0
 80044f4:	f7fe fc10 	bl	8002d18 <xQueueGenericSend>
 80044f8:	6278      	str	r0, [r7, #36]	; 0x24
 80044fa:	e008      	b.n	800450e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <xTimerGenericCommand+0x94>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	f107 0114 	add.w	r1, r7, #20
 8004504:	2300      	movs	r3, #0
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	f7fe fd00 	bl	8002f0c <xQueueGenericSendFromISR>
 800450c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004510:	4618      	mov	r0, r3
 8004512:	3728      	adds	r7, #40	; 0x28
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000834 	.word	0x20000834

0800451c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <prvProcessExpiredTimer+0x94>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	3304      	adds	r3, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe facb 	bl	8002ad0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d021      	beq.n	800458c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	18d1      	adds	r1, r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	6978      	ldr	r0, [r7, #20]
 8004556:	f000 f8d1 	bl	80046fc <prvInsertTimerInActiveList>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01e      	beq.n	800459e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004560:	2300      	movs	r3, #0
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	2100      	movs	r1, #0
 800456a:	6978      	ldr	r0, [r7, #20]
 800456c:	f7ff ff8a 	bl	8004484 <xTimerGenericCommand>
 8004570:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d112      	bne.n	800459e <prvProcessExpiredTimer+0x82>
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e7fe      	b.n	800458a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	6978      	ldr	r0, [r7, #20]
 80045a4:	4798      	blx	r3
}
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000082c 	.word	0x2000082c

080045b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045bc:	f107 0308 	add.w	r3, r7, #8
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f857 	bl	8004674 <prvGetNextExpireTime>
 80045c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4619      	mov	r1, r3
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f803 	bl	80045d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045d2:	f000 f8d5 	bl	8004780 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045d6:	e7f1      	b.n	80045bc <prvTimerTask+0x8>

080045d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045e2:	f7ff f997 	bl	8003914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f866 	bl	80046bc <prvSampleTimeNow>
 80045f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d130      	bne.n	800465a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <prvProcessTimerOrBlockTask+0x3c>
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	429a      	cmp	r2, r3
 8004604:	d806      	bhi.n	8004614 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004606:	f7ff f993 	bl	8003930 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff85 	bl	800451c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004612:	e024      	b.n	800465e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <prvProcessTimerOrBlockTask+0x90>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <prvProcessTimerOrBlockTask+0x50>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <prvProcessTimerOrBlockTask+0x52>
 8004628:	2300      	movs	r3, #0
 800462a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <prvProcessTimerOrBlockTask+0x94>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4619      	mov	r1, r3
 800463a:	f7fe ff0f 	bl	800345c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800463e:	f7ff f977 	bl	8003930 <xTaskResumeAll>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <prvProcessTimerOrBlockTask+0x98>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
}
 8004658:	e001      	b.n	800465e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800465a:	f7ff f969 	bl	8003930 <xTaskResumeAll>
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000830 	.word	0x20000830
 800466c:	20000834 	.word	0x20000834
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <prvGetNextExpireTime+0x44>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <prvGetNextExpireTime+0x16>
 8004686:	2201      	movs	r2, #1
 8004688:	e000      	b.n	800468c <prvGetNextExpireTime+0x18>
 800468a:	2200      	movs	r2, #0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <prvGetNextExpireTime+0x44>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e001      	b.n	80046a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046a8:	68fb      	ldr	r3, [r7, #12]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	2000082c 	.word	0x2000082c

080046bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046c4:	f7ff f9d0 	bl	8003a68 <xTaskGetTickCount>
 80046c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <prvSampleTimeNow+0x3c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d205      	bcs.n	80046e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046d4:	f000 f918 	bl	8004908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e002      	b.n	80046e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046e6:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <prvSampleTimeNow+0x3c>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046ec:	68fb      	ldr	r3, [r7, #12]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	2000083c 	.word	0x2000083c

080046fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	429a      	cmp	r2, r3
 8004720:	d812      	bhi.n	8004748 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	1ad2      	subs	r2, r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	429a      	cmp	r2, r3
 800472e:	d302      	bcc.n	8004736 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e01b      	b.n	800476e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <prvInsertTimerInActiveList+0x7c>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3304      	adds	r3, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7fe f98c 	bl	8002a5e <vListInsert>
 8004746:	e012      	b.n	800476e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d206      	bcs.n	800475e <prvInsertTimerInActiveList+0x62>
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e007      	b.n	800476e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <prvInsertTimerInActiveList+0x80>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7fe f978 	bl	8002a5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800476e:	697b      	ldr	r3, [r7, #20]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000830 	.word	0x20000830
 800477c:	2000082c 	.word	0x2000082c

08004780 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	; 0x30
 8004784:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004786:	e0ac      	b.n	80048e2 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f2c0 80a8 	blt.w	80048e0 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	3304      	adds	r3, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe f995 	bl	8002ad0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff87 	bl	80046bc <prvSampleTimeNow>
 80047ae:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b09      	cmp	r3, #9
 80047b4:	f200 8095 	bhi.w	80048e2 <prvProcessReceivedCommands+0x162>
 80047b8:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <prvProcessReceivedCommands+0x40>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047e9 	.word	0x080047e9
 80047cc:	0800485b 	.word	0x0800485b
 80047d0:	0800486f 	.word	0x0800486f
 80047d4:	080048b7 	.word	0x080048b7
 80047d8:	080047e9 	.word	0x080047e9
 80047dc:	080047e9 	.word	0x080047e9
 80047e0:	0800485b 	.word	0x0800485b
 80047e4:	0800486f 	.word	0x0800486f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	18d1      	adds	r1, r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004808:	f7ff ff78 	bl	80046fc <prvInsertTimerInActiveList>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d067      	beq.n	80048e2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004818:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05c      	beq.n	80048e2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	441a      	add	r2, r3
 8004830:	2300      	movs	r3, #0
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	2100      	movs	r1, #0
 8004838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800483a:	f7ff fe23 	bl	8004484 <xTimerGenericCommand>
 800483e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d14d      	bne.n	80048e2 <prvProcessReceivedCommands+0x162>
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	e7fe      	b.n	8004858 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	b2da      	uxtb	r2, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800486c:	e039      	b.n	80048e2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	b2da      	uxtb	r2, r3
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <prvProcessReceivedCommands+0x122>
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e7fe      	b.n	80048a0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	18d1      	adds	r1, r2, r3
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b0:	f7ff ff24 	bl	80046fc <prvInsertTimerInActiveList>
					break;
 80048b4:	e015      	b.n	80048e2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d103      	bne.n	80048cc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80048c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048c6:	f000 fbc5 	bl	8005054 <vPortFree>
 80048ca:	e00a      	b.n	80048e2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048de:	e000      	b.n	80048e2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80048e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <prvProcessReceivedCommands+0x184>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f107 0108 	add.w	r1, r7, #8
 80048ea:	2200      	movs	r2, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe fba1 	bl	8003034 <xQueueReceive>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f af47 	bne.w	8004788 <prvProcessReceivedCommands+0x8>
	}
}
 80048fa:	bf00      	nop
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000834 	.word	0x20000834

08004908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800490e:	e047      	b.n	80049a0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491a:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe f8d1 	bl	8002ad0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02d      	beq.n	80049a0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d90e      	bls.n	8004974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f7fe f876 	bl	8002a5e <vListInsert>
 8004972:	e015      	b.n	80049a0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2300      	movs	r3, #0
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	2100      	movs	r1, #0
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff fd80 	bl	8004484 <xTimerGenericCommand>
 8004984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <prvSwitchTimerLists+0x98>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	e7fe      	b.n	800499e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1b2      	bne.n	8004910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <prvSwitchTimerLists+0xc4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 80049b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049b8:	4a04      	ldr	r2, [pc, #16]	; (80049cc <prvSwitchTimerLists+0xc4>)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	2000082c 	.word	0x2000082c
 80049cc:	20000830 	.word	0x20000830

080049d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049d6:	f000 f961 	bl	8004c9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <prvCheckForValidListAndQueue+0x60>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d120      	bne.n	8004a24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049e2:	4814      	ldr	r0, [pc, #80]	; (8004a34 <prvCheckForValidListAndQueue+0x64>)
 80049e4:	f7fd ffea 	bl	80029bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049e8:	4813      	ldr	r0, [pc, #76]	; (8004a38 <prvCheckForValidListAndQueue+0x68>)
 80049ea:	f7fd ffe7 	bl	80029bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <prvCheckForValidListAndQueue+0x6c>)
 80049f0:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <prvCheckForValidListAndQueue+0x64>)
 80049f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <prvCheckForValidListAndQueue+0x70>)
 80049f6:	4a10      	ldr	r2, [pc, #64]	; (8004a38 <prvCheckForValidListAndQueue+0x68>)
 80049f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049fa:	2300      	movs	r3, #0
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <prvCheckForValidListAndQueue+0x74>)
 8004a00:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <prvCheckForValidListAndQueue+0x78>)
 8004a02:	210c      	movs	r1, #12
 8004a04:	200a      	movs	r0, #10
 8004a06:	f7fe f8f5 	bl	8002bf4 <xQueueGenericCreateStatic>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <prvCheckForValidListAndQueue+0x60>)
 8004a0e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <prvCheckForValidListAndQueue+0x60>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <prvCheckForValidListAndQueue+0x60>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	490b      	ldr	r1, [pc, #44]	; (8004a4c <prvCheckForValidListAndQueue+0x7c>)
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fcf4 	bl	800340c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a24:	f000 f968 	bl	8004cf8 <vPortExitCritical>
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000834 	.word	0x20000834
 8004a34:	20000804 	.word	0x20000804
 8004a38:	20000818 	.word	0x20000818
 8004a3c:	2000082c 	.word	0x2000082c
 8004a40:	20000830 	.word	0x20000830
 8004a44:	200008b8 	.word	0x200008b8
 8004a48:	20000840 	.word	0x20000840
 8004a4c:	08005340 	.word	0x08005340

08004a50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3b04      	subs	r3, #4
 8004a60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f023 0201 	bic.w	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a80:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <pxPortInitialiseStack+0x64>)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b14      	subs	r3, #20
 8004a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b04      	subs	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f06f 0202 	mvn.w	r2, #2
 8004a9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3b20      	subs	r3, #32
 8004aa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	08004ab9 	.word	0x08004ab9

08004ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <prvTaskExitError+0x50>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d009      	beq.n	8004ae0 <prvTaskExitError+0x28>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e7fe      	b.n	8004ade <prvTaskExitError+0x26>
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004af2:	bf00      	nop
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0fc      	beq.n	8004af4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000010 	.word	0x20000010
 8004b0c:	00000000 	.word	0x00000000

08004b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <pxCurrentTCBConst2>)
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	f380 8809 	msr	PSP, r0
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	4770      	bx	lr
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst2>:
 8004b30:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b38:	4808      	ldr	r0, [pc, #32]	; (8004b5c <prvPortStartFirstTask+0x24>)
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f380 8808 	msr	MSP, r0
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8814 	msr	CONTROL, r0
 8004b4a:	b662      	cpsie	i
 8004b4c:	b661      	cpsie	f
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	df00      	svc	0
 8004b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b5a:	bf00      	nop
 8004b5c:	e000ed08 	.word	0xe000ed08

08004b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b66:	4b44      	ldr	r3, [pc, #272]	; (8004c78 <xPortStartScheduler+0x118>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a44      	ldr	r2, [pc, #272]	; (8004c7c <xPortStartScheduler+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <xPortStartScheduler+0x24>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e7fe      	b.n	8004b82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b84:	4b3c      	ldr	r3, [pc, #240]	; (8004c78 <xPortStartScheduler+0x118>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a3d      	ldr	r2, [pc, #244]	; (8004c80 <xPortStartScheduler+0x120>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d109      	bne.n	8004ba2 <xPortStartScheduler+0x42>
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e7fe      	b.n	8004ba0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <xPortStartScheduler+0x124>)
 8004ba4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	22ff      	movs	r2, #255	; 0xff
 8004bb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <xPortStartScheduler+0x128>)
 8004bc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bca:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004bcc:	2207      	movs	r2, #7
 8004bce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bd0:	e009      	b.n	8004be6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004bda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d0ef      	beq.n	8004bd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bf2:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d009      	beq.n	8004c12 <xPortStartScheduler+0xb2>
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	e7fe      	b.n	8004c10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004c1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <xPortStartScheduler+0x12c>)
 8004c26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <xPortStartScheduler+0x130>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <xPortStartScheduler+0x130>)
 8004c36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <xPortStartScheduler+0x130>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <xPortStartScheduler+0x130>)
 8004c42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c48:	f000 f8d6 	bl	8004df8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <xPortStartScheduler+0x134>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c52:	f000 f8f5 	bl	8004e40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <xPortStartScheduler+0x138>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <xPortStartScheduler+0x138>)
 8004c5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c62:	f7ff ff69 	bl	8004b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c66:	f7fe ffc7 	bl	8003bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c6a:	f7ff ff25 	bl	8004ab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	e000ed00 	.word	0xe000ed00
 8004c7c:	410fc271 	.word	0x410fc271
 8004c80:	410fc270 	.word	0x410fc270
 8004c84:	e000e400 	.word	0xe000e400
 8004c88:	20000900 	.word	0x20000900
 8004c8c:	20000904 	.word	0x20000904
 8004c90:	e000ed20 	.word	0xe000ed20
 8004c94:	20000010 	.word	0x20000010
 8004c98:	e000ef34 	.word	0xe000ef34

08004c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <vPortEnterCritical+0x54>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <vPortEnterCritical+0x54>)
 8004cbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <vPortEnterCritical+0x54>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d10e      	bne.n	8004ce4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortEnterCritical+0x58>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <vPortEnterCritical+0x48>
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	e7fe      	b.n	8004ce2 <vPortEnterCritical+0x46>
	}
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	20000010 	.word	0x20000010
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <vPortExitCritical+0x4c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <vPortExitCritical+0x22>
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	e7fe      	b.n	8004d18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <vPortExitCritical+0x4c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <vPortExitCritical+0x4c>)
 8004d22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <vPortExitCritical+0x4c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <vPortExitCritical+0x3e>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000010 	.word	0x20000010
	...

08004d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d50:	f3ef 8009 	mrs	r0, PSP
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <pxCurrentTCBConst>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	f01e 0f10 	tst.w	lr, #16
 8004d60:	bf08      	it	eq
 8004d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	6010      	str	r0, [r2, #0]
 8004d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d74:	f380 8811 	msr	BASEPRI, r0
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f7fe ff3a 	bl	8003bf8 <vTaskSwitchContext>
 8004d84:	f04f 0000 	mov.w	r0, #0
 8004d88:	f380 8811 	msr	BASEPRI, r0
 8004d8c:	bc09      	pop	{r0, r3}
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	6808      	ldr	r0, [r1, #0]
 8004d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d96:	f01e 0f10 	tst.w	lr, #16
 8004d9a:	bf08      	it	eq
 8004d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004da0:	f380 8809 	msr	PSP, r0
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	f3af 8000 	nop.w

08004db0 <pxCurrentTCBConst>:
 8004db0:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dd0:	f7fe fe5a 	bl	8003a88 <xTaskIncrementTick>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <SysTick_Handler+0x3c>)
 8004ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	2300      	movs	r3, #0
 8004de4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <vPortSetupTimerInterrupt+0x34>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <vPortSetupTimerInterrupt+0x38>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <vPortSetupTimerInterrupt+0x3c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <vPortSetupTimerInterrupt+0x40>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	099b      	lsrs	r3, r3, #6
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <vPortSetupTimerInterrupt+0x44>)
 8004e16:	3b01      	subs	r3, #1
 8004e18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e1a:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <vPortSetupTimerInterrupt+0x34>)
 8004e1c:	2207      	movs	r2, #7
 8004e1e:	601a      	str	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	e000e010 	.word	0xe000e010
 8004e30:	e000e018 	.word	0xe000e018
 8004e34:	20000004 	.word	0x20000004
 8004e38:	10624dd3 	.word	0x10624dd3
 8004e3c:	e000e014 	.word	0xe000e014

08004e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e50 <vPortEnableVFP+0x10>
 8004e44:	6801      	ldr	r1, [r0, #0]
 8004e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e4a:	6001      	str	r1, [r0, #0]
 8004e4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e4e:	bf00      	nop
 8004e50:	e000ed88 	.word	0xe000ed88

08004e54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e5a:	f3ef 8305 	mrs	r3, IPSR
 8004e5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b0f      	cmp	r3, #15
 8004e64:	d913      	bls.n	8004e8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e66:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <vPortValidateInterruptPriority+0x6c>)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e70:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <vPortValidateInterruptPriority+0x70>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	7afa      	ldrb	r2, [r7, #11]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d209      	bcs.n	8004e8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	e7fe      	b.n	8004e8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <vPortValidateInterruptPriority+0x74>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <vPortValidateInterruptPriority+0x78>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d909      	bls.n	8004eb2 <vPortValidateInterruptPriority+0x5e>
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	e7fe      	b.n	8004eb0 <vPortValidateInterruptPriority+0x5c>
	}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000e3f0 	.word	0xe000e3f0
 8004ec4:	20000900 	.word	0x20000900
 8004ec8:	e000ed0c 	.word	0xe000ed0c
 8004ecc:	20000904 	.word	0x20000904

08004ed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004edc:	f7fe fd1a 	bl	8003914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ee0:	4b57      	ldr	r3, [pc, #348]	; (8005040 <pvPortMalloc+0x170>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ee8:	f000 f90c 	bl	8005104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eec:	4b55      	ldr	r3, [pc, #340]	; (8005044 <pvPortMalloc+0x174>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 808c 	bne.w	8005012 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01c      	beq.n	8004f3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004f00:	2208      	movs	r2, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d013      	beq.n	8004f3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f023 0307 	bic.w	r3, r3, #7
 8004f18:	3308      	adds	r3, #8
 8004f1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <pvPortMalloc+0x6a>
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e7fe      	b.n	8004f38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d068      	beq.n	8005012 <pvPortMalloc+0x142>
 8004f40:	4b41      	ldr	r3, [pc, #260]	; (8005048 <pvPortMalloc+0x178>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d863      	bhi.n	8005012 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f4a:	4b40      	ldr	r3, [pc, #256]	; (800504c <pvPortMalloc+0x17c>)
 8004f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <pvPortMalloc+0x17c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f54:	e004      	b.n	8004f60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d903      	bls.n	8004f72 <pvPortMalloc+0xa2>
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f1      	bne.n	8004f56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f72:	4b33      	ldr	r3, [pc, #204]	; (8005040 <pvPortMalloc+0x170>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d04a      	beq.n	8005012 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2208      	movs	r2, #8
 8004f82:	4413      	add	r3, r2
 8004f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	1ad2      	subs	r2, r2, r3
 8004f96:	2308      	movs	r3, #8
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d91e      	bls.n	8004fdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <pvPortMalloc+0xf4>
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e7fe      	b.n	8004fc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fd6:	69b8      	ldr	r0, [r7, #24]
 8004fd8:	f000 f8f6 	bl	80051c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <pvPortMalloc+0x178>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <pvPortMalloc+0x178>)
 8004fe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <pvPortMalloc+0x178>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b18      	ldr	r3, [pc, #96]	; (8005050 <pvPortMalloc+0x180>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d203      	bcs.n	8004ffe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <pvPortMalloc+0x178>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <pvPortMalloc+0x180>)
 8004ffc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <pvPortMalloc+0x174>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	431a      	orrs	r2, r3
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005012:	f7fe fc8d 	bl	8003930 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <pvPortMalloc+0x164>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	e7fe      	b.n	8005032 <pvPortMalloc+0x162>
	return pvReturn;
 8005034:	69fb      	ldr	r3, [r7, #28]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3728      	adds	r7, #40	; 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20004510 	.word	0x20004510
 8005044:	2000451c 	.word	0x2000451c
 8005048:	20004514 	.word	0x20004514
 800504c:	20004508 	.word	0x20004508
 8005050:	20004518 	.word	0x20004518

08005054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d046      	beq.n	80050f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005066:	2308      	movs	r3, #8
 8005068:	425b      	negs	r3, r3
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <vPortFree+0xa8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <vPortFree+0x42>
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e7fe      	b.n	8005094 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <vPortFree+0x5e>
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	e7fe      	b.n	80050b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <vPortFree+0xa8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d019      	beq.n	80050f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d115      	bne.n	80050f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <vPortFree+0xa8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	401a      	ands	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050d8:	f7fe fc1c 	bl	8003914 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <vPortFree+0xac>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4413      	add	r3, r2
 80050e6:	4a06      	ldr	r2, [pc, #24]	; (8005100 <vPortFree+0xac>)
 80050e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ea:	6938      	ldr	r0, [r7, #16]
 80050ec:	f000 f86c 	bl	80051c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80050f0:	f7fe fc1e 	bl	8003930 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050f4:	bf00      	nop
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	2000451c 	.word	0x2000451c
 8005100:	20004514 	.word	0x20004514

08005104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800510a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800510e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005110:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <prvHeapInit+0xac>)
 8005112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3307      	adds	r3, #7
 8005122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0307 	bic.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <prvHeapInit+0xac>)
 8005134:	4413      	add	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800513c:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <prvHeapInit+0xb0>)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <prvHeapInit+0xb0>)
 8005144:	2200      	movs	r2, #0
 8005146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4413      	add	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005150:	2208      	movs	r2, #8
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0307 	bic.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <prvHeapInit+0xb4>)
 8005164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005166:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <prvHeapInit+0xb4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <prvHeapInit+0xb4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <prvHeapInit+0xb4>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <prvHeapInit+0xb8>)
 8005192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <prvHeapInit+0xbc>)
 800519a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <prvHeapInit+0xc0>)
 800519e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051a2:	601a      	str	r2, [r3, #0]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000908 	.word	0x20000908
 80051b4:	20004508 	.word	0x20004508
 80051b8:	20004510 	.word	0x20004510
 80051bc:	20004518 	.word	0x20004518
 80051c0:	20004514 	.word	0x20004514
 80051c4:	2000451c 	.word	0x2000451c

080051c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051d0:	4b28      	ldr	r3, [pc, #160]	; (8005274 <prvInsertBlockIntoFreeList+0xac>)
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e002      	b.n	80051dc <prvInsertBlockIntoFreeList+0x14>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d8f7      	bhi.n	80051d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4413      	add	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d108      	bne.n	800520a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	441a      	add	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d118      	bne.n	8005250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <prvInsertBlockIntoFreeList+0xb0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d00d      	beq.n	8005246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e008      	b.n	8005258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <prvInsertBlockIntoFreeList+0xb0>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e003      	b.n	8005258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	d002      	beq.n	8005266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20004508 	.word	0x20004508
 8005278:	20004510 	.word	0x20004510

0800527c <__libc_init_array>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	4e0d      	ldr	r6, [pc, #52]	; (80052b4 <__libc_init_array+0x38>)
 8005280:	4c0d      	ldr	r4, [pc, #52]	; (80052b8 <__libc_init_array+0x3c>)
 8005282:	1ba4      	subs	r4, r4, r6
 8005284:	10a4      	asrs	r4, r4, #2
 8005286:	2500      	movs	r5, #0
 8005288:	42a5      	cmp	r5, r4
 800528a:	d109      	bne.n	80052a0 <__libc_init_array+0x24>
 800528c:	4e0b      	ldr	r6, [pc, #44]	; (80052bc <__libc_init_array+0x40>)
 800528e:	4c0c      	ldr	r4, [pc, #48]	; (80052c0 <__libc_init_array+0x44>)
 8005290:	f000 f82c 	bl	80052ec <_init>
 8005294:	1ba4      	subs	r4, r4, r6
 8005296:	10a4      	asrs	r4, r4, #2
 8005298:	2500      	movs	r5, #0
 800529a:	42a5      	cmp	r5, r4
 800529c:	d105      	bne.n	80052aa <__libc_init_array+0x2e>
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052a4:	4798      	blx	r3
 80052a6:	3501      	adds	r5, #1
 80052a8:	e7ee      	b.n	8005288 <__libc_init_array+0xc>
 80052aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ae:	4798      	blx	r3
 80052b0:	3501      	adds	r5, #1
 80052b2:	e7f2      	b.n	800529a <__libc_init_array+0x1e>
 80052b4:	08005368 	.word	0x08005368
 80052b8:	08005368 	.word	0x08005368
 80052bc:	08005368 	.word	0x08005368
 80052c0:	0800536c 	.word	0x0800536c

080052c4 <memcpy>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	1e43      	subs	r3, r0, #1
 80052c8:	440a      	add	r2, r1
 80052ca:	4291      	cmp	r1, r2
 80052cc:	d100      	bne.n	80052d0 <memcpy+0xc>
 80052ce:	bd10      	pop	{r4, pc}
 80052d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052d8:	e7f7      	b.n	80052ca <memcpy+0x6>

080052da <memset>:
 80052da:	4402      	add	r2, r0
 80052dc:	4603      	mov	r3, r0
 80052de:	4293      	cmp	r3, r2
 80052e0:	d100      	bne.n	80052e4 <memset+0xa>
 80052e2:	4770      	bx	lr
 80052e4:	f803 1b01 	strb.w	r1, [r3], #1
 80052e8:	e7f9      	b.n	80052de <memset+0x4>
	...

080052ec <_init>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr

080052f8 <_fini>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr
